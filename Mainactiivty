package com.example.rayo

import android.graphics.Bitmap
import android.graphics.drawable.Drawable
import android.os.Bundle
import android.util.Log
import android.widget.SeekBar
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.room.Room
import com.bumptech.glide.Glide
import com.bumptech.glide.request.target.CustomTarget
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine
import kotlinx.coroutines.withContext
import kotlin.coroutines.resume

class MainActivity : AppCompatActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: ImageAdapter
    private lateinit var db:ImageDatabase
    private lateinit var seekBarOpacity: SeekBar

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
//        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
//            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
//            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
//            insets
//        }


        db= Room.databaseBuilder(applicationContext,ImageDatabase::class.java,"image_database").build()

//        holder.imageView.setImageBitmap(bitmap)

        recyclerView= findViewById(R.id.recyclerView)
       recyclerView.layoutManager= LinearLayoutManager(this)
        CoroutineScope(Dispatchers.IO).launch {


            try{
                val response= RetrofitInstance.api.getAllImages().execute().body()?: emptyList()

//                val imageEntities= response.map {
//                    ImageEntity(
//                       id = it.id,
//                       download_url =  it.download_url
//                    )
//                }
//                db.imageDao().insertImage(imageEntities)
//                response.forEach { image ->
//
//                    val bitmap = downloadImage(image.download_url)
//
//                    bitmap?.let {
//                        val byteArray = Converters().fromBitmap(it)
//                        val imageEntity = ImageEntity(
//                            download_url = image.download_url,
//                            image = byteArray
//                        )
//                        db.imageDao().insertImage(listOf(imageEntity))
//                        Log.e("Database", "Inserted image with URL: ${image.download_url}")
//                    }
//                }

//                val storedImages= db.imageDao().getAllImage()
                Log.e("Room database", "database created")
                withContext(Dispatchers.Main) {


                        recyclerView.adapter = ImageAdapter(response)
                    }

                }
            catch (e: Exception) {
                Log.d("MainActivity", "Error in this activity: ${e.message}")
            }
            }

        }
    private suspend fun downloadImage(url: String): Bitmap? = withContext(Dispatchers.IO) {
        suspendCancellableCoroutine { continuation ->
            Glide.with(this@MainActivity)
                .asBitmap()
                .load(url)
                .into(object : CustomTarget<Bitmap>() {
                    override fun onResourceReady(resource: Bitmap, transition: com.bumptech.glide.request.transition.Transition<in Bitmap>?) {
                        continuation.resume(resource)
                    }

                    override fun onLoadCleared(placeholder: Drawable?) {
                        continuation.resume(null)
                    }

                    override fun onLoadFailed(errorDrawable: Drawable?) {
                        continuation.resume(null)
                    }
                })
        }
    }
    }



//

package com.example.rayo

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import androidx.room.TypeConverter
import java.io.ByteArrayOutputStream

class Converters {

    @TypeConverter
    fun fromBitmap(bitmap: Bitmap):ByteArray{
        val outputStream= ByteArrayOutputStream()
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
        return  outputStream.toByteArray()
    }

    @TypeConverter
    fun toBitmap(byteArray: ByteArray):Bitmap{
        return BitmapFactory.decodeByteArray(byteArray,0,byteArray.size)
    }
}

//


package com.example.rayo

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.SeekBar
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import retrofit2.Call

class ImageAdapter(private val list: List<Image>) : RecyclerView.Adapter<ImageAdapter.ImageViewHolder>() {

    inner class ImageViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        var imageView: ImageView = view.findViewById(R.id.imageView)
        var seekBarOpacity: SeekBar= view.findViewById(R.id.seekBarOpacity)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ImageViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_image, parent, false)
        return ImageViewHolder(view)
    }

    override fun getItemCount(): Int {
        return list.size
    }

    override fun onBindViewHolder(holder: ImageViewHolder, position: Int) {
        val image = list[position]
//        val bitmap = Converters().toBitmap(image.image)
//        holder.imageView.setImageBitmap(bitmap)
        Glide.with(holder.imageView.context).load(image.download_url).into(holder.imageView)

        holder.seekBarOpacity.progress = 255
        holder.imageView.alpha = holder.seekBarOpacity.progress / 255f

        // Update image opacity based on SeekBar changes
        holder.seekBarOpacity.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                holder.imageView.alpha = progress / 255f
            }

            override fun onStartTrackingTouch(seekBar: SeekBar?) {
                // No action needed here
            }

            override fun onStopTrackingTouch(seekBar: SeekBar?) {
                // No action needed here
            }
        })
    }
    }

 val room_version = "2.6.1"
    implementation ("androidx.room:room-runtime:$room_version")
    annotationProcessor ("androidx.room:room-compiler:$room_version")
    kapt("androidx.room:room-compiler:$room_version")
    implementation ("androidx.room:room-ktx:$room_version")
    implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
    implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
    implementation ("com.github.bumptech.glide:glide:4.15.1")
    kapt ("com.github.bumptech.glide:compiler:4.15.1")
    implementation ("com.squareup.retrofit2:retrofit:2.9.0")
    implementation ("com.squareup.retrofit2:converter-gson:2.9.0")
    testImplementation ("androidx.room:room-testing:$room_version")
